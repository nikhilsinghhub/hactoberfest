--------------------->>GIT COMMANDS<<-----------------------------------------------------
We divide Git into two types of commands
1->high level ("porcelain") commands.
2->low level ("plumbing") commands.

    
--------------->High-level commands (porcelain)

We separate the porcelain commands into the main commands and some ancillary user utilities.

Main porcelain commands
git-add
Add file contents to the index

git-am
Apply a series of patches from a mailbox

git-archive
Create an archive of files from a named tree

git-bisect
Use binary search to find the commit that introduced a bug

git-branch
List, create, or delete branches

git-bundle
Move objects and refs by archive

git-checkout
Switch branches or restore working tree files

git-cherry-pick
Apply the changes introduced by some existing commits

git-citool
Graphical alternative to git-commit

git-clean
Remove untracked files from the working tree

git-clone
Clone a repository into a new directory

git-commit
Record changes to the repository

git-describe
Give an object a human readable name based on an available ref

git-diff
Show changes between commits, commit and working tree, etc

git-fetch
Download objects and refs from another repository

git-format-patch
Prepare patches for e-mail submission

git-gc
Cleanup unnecessary files and optimize the local repository

git-grep
Print lines matching a pattern

git-gui
A portable graphical interface to Git

git-init
Create an empty Git repository or reinitialize an existing one

git-log
Show commit logs

git-maintenance
Run tasks to optimize Git repository data

git-merge
Join two or more development histories together

git-mv
Move or rename a file, a directory, or a symlink

git-notes
Add or inspect object notes

git-pull
Fetch from and integrate with another repository or a local branch

git-push
Update remote refs along with associated objects

git-range-diff
Compare two commit ranges (e.g. two versions of a branch)

git-rebase
Reapply commits on top of another base tip

git-reset
Reset current HEAD to the specified state

git-restore
Restore working tree files

git-revert
Revert some existing commits

git-rm
Remove files from the working tree and from the index

git-shortlog
Summarize git log output

git-show
Show various types of objects

git-sparse-checkout
Reduce your working tree to a subset of tracked files

git-stash
Stash the changes in a dirty working directory away

git-status
Show the working tree status

git-submodule
Initialize, update or inspect submodules

git-switch
Switch branches

git-tag
Create, list, delete or verify a tag object signed with GPG

git-worktree
Manage multiple working trees

gitk
The Git repository browser

scalar
A tool for managing large Git repositories

Ancillary Commands
Manipulators:

git-config
Get and set repository or global options

git-fast-export
Git data exporter

git-fast-import
Backend for fast Git data importers

git-filter-branch
Rewrite branches

git-mergetool
Run merge conflict resolution tools to resolve merge conflicts

git-pack-refs
Pack heads and tags for efficient repository access

git-prune
Prune all unreachable objects from the object database

git-reflog
Manage reflog information

git-remote
Manage set of tracked repositories

git-repack
Pack unpacked objects in a repository

git-replace
Create, list, delete refs to replace objects

Interrogators:

git-annotate
Annotate file lines with commit information

git-blame
Show what revision and author last modified each line of a file

git-bugreport
Collect information for user to file a bug report

git-count-objects
Count unpacked number of objects and their disk consumption

git-diagnose
Generate a zip archive of diagnostic information

git-difftool
Show changes using common diff tools

git-fsck
Verifies the connectivity and validity of the objects in the database

git-help
Display help information about Git

git-instaweb
Instantly browse your working repository in gitweb

git-merge-tree
Perform merge without touching index or working tree

git-rerere
Reuse recorded resolution of conflicted merges

git-show-branch
Show branches and their commits

git-verify-commit
Check the GPG signature of commits

git-verify-tag
Check the GPG signature of tags

git-version
Display version information about Git

git-whatchanged
Show logs with difference each commit introduces

gitweb
Git web interface (web frontend to Git repositories)

Interacting with Others
These commands are to interact with foreign SCM and with other people via patch over e-mail.

git-archimport
Import a GNU Arch repository into Git

git-cvsexportcommit
Export a single commit to a CVS checkout

git-cvsimport
Salvage your data out of another SCM people love to hate

git-cvsserver
A CVS server emulator for Git

git-imap-send
Send a collection of patches from stdin to an IMAP folder

git-p4
Import from and submit to Perforce repositories

git-quiltimport
Applies a quilt patchset onto the current branch

git-request-pull
Generates a summary of pending changes

git-send-email
Send a collection of patches as emails

git-svn
Bidirectional operation between a Subversion repository and Git

------------------>>Reset, restore and revert
There are three commands with similar names: git reset, git restore and git revert.

git-revert ->is about making a new commit that reverts the changes made by other commits.

git-restore ->is about restoring files in the working tree from either the index or another commit. This command does not update your branch. The command can also be used to restore files in the index from another commit.

git-reset ->is about updating your branch, moving the tip in order to add or remove commits from the branch. This operation changes the commit history.

git reset ->can also be used to restore the index, overlapping with git restore.

